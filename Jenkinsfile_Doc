pipeline {
    agent any

    environment {
        // Define environment variables
        APP_NAME = "node-express-server-rest-api"
        DOCKER_IMAGE = "saikrupaelate/${APP_NAME}" // Replace with your Docker Hub username
        DOCKER_TAG = "latest"
        DEPLOY_DIR = "/var/www/${APP_NAME}"
        GITHUB_REPO = "https://github.com/saikrupaelate/CICD-NodeJS-RestAPI.git"
        BRANCH = "main"
    }

    stages {
        // Stage 1: Checkout code from GitHub
        stage('Checkout') {
            steps {
                echo "Checking out code from GitHub..."
                git branch: "${BRANCH}", url: "${GITHUB_REPO}"
            }
        }

        // Stage 2: Install Docker
        stage('Install Docker') {
            steps {
                echo "Installing Docker..."
                sh '''
                    # Check if Docker is already installed
                    if ! command -v docker &> /dev/null; then
                        echo "Docker not found. Installing Docker..."
                        sudo apt update -y
                        sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu noble stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                        sudo apt update -y
                        sudo apt install docker-ce docker-ce-cli containerd.io -y
                        echo "Docker installed successfully."

                        # Add Jenkins user to the Docker group
                        echo "Adding Jenkins user to the Docker group..."
                        sudo usermod -aG docker jenkins

                        # Restart Jenkins to apply group changes
                        echo "Restarting Jenkins..."
                        sudo systemctl restart jenkins
                    else
                        echo "Docker is already installed."
                    fi
                '''
            }
        }

        // Stage 3: Build Docker Image
        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh """
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                """
            }
        }

        // Stage 4: Push Docker Image to Docker Hub
        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                        echo "Logging in to Docker Hub..."
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        echo "Pushing Docker image..."
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        // Stage 5: Deploy Docker Container
        stage('Deploy Docker Container') {
            steps {
                echo "Deploying Docker container..."

                sh """
                    docker stop ${APP_NAME} || true
                    docker rm ${APP_NAME} || true
                    docker run -d --name ${APP_NAME} -p 3000:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                """
                echo "Application deployed successfully!"
            }
        }
    }

    post {
        success {
            echo "Pipeline succeeded! Application is live."
        }
        failure {
            echo "Pipeline failed. Check the logs for errors."
        }
    }
}
